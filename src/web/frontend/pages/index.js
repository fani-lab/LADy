import Head from "next/head";
import { Inter } from "@next/font/google";
import {
  Box,
  Center,
  Container,
  Divider,
  HStack,
  Heading,
  ListItem,
  Text,
  UnorderedList,
  VStack,
} from "@chakra-ui/layout";
import { Textarea } from "@chakra-ui/textarea";
import { InfoOutlineIcon, RepeatIcon, SmallCloseIcon } from "@chakra-ui/icons";

import Footer from "../Components/Footer";
import { useState } from "react";
import { Button } from "@chakra-ui/button";
import Chart from "../Components/Chart";
import {
  Select,
  FormControl,
  FormLabel,
  FormErrorMessage,
  FormHelperText,
} from "@chakra-ui/react";
const inter = Inter({ subsets: ["latin"] });

//use state to store textarea value
export default function Home() {
  const [formval, setformval] = useState(
    "The food was fresh and delicious, and the best part was that the chef sent us a dessert they had created that day."
  );
  const [selectedModel, setSelectedModel] = useState("btm");
  const [data, setData] = useState("");

  const getRandomReview = async () => {
    const response = await fetch("https://lady.onrender.com/random");
    const json = await response.json();

    setformval(json[0]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const requestOptions = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        text: formval,
        model: selectedModel,
      }),
    };

    const response = await fetch(
      "https://lady.onrender.com/api",
      requestOptions
    );
    const json = await response.json();

    setData(json);
  };
  let handleInputChange = (e) => {
    let inputValue = e.target.value;
    setformval(inputValue);
  };
  const isError = formval === "";

  const labels = Object.keys(data);
  const values = Object.values(data);
  console.log("labels", labels);
  values.sort(function (a, b) {
    return b - a;
  });

  const output = {
    labels,
    datasets: [
      {
        label: "ree",
        data: values,
        borderColor: "rgb(53, 162, 235)",
        backgroundColor: "rgb(53, 162, 235)",
      } /*
      {
        label: "Dataset 2",
        data: [20, 30, 20, 10, 10, 5, 0],
        borderColor: "rgb(53, 162, 235)",
        backgroundColor: "rgba(53, 162, 235, 0.5)",
      },*/,
    ],
  };
  return (
    <>
      <Head>
        <title>Latent Aspect Detection</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container minWidth={"container.lg"} p="5">
        <Heading mb="10">Latent Aspect Detection</Heading>
        <FormControl isInvalid={isError}>
          <HStack mb="5" spacing={4}>
            <Button
              leftIcon={<InfoOutlineIcon />}
              colorScheme="teal"
              variant="outline"
            >
              Info
            </Button>{" "}
            <Button
              leftIcon={<RepeatIcon />}
              colorScheme="teal"
              variant="outline"
              onClick={getRandomReview}
            >
              Random review
            </Button>
            <FormLabel>Model: </FormLabel>
            <Select
              maxWidth={"200px"}
              borderColor={"teal"}
              value={selectedModel}
              onChange={(e) => setSelectedModel(e.target.value)}
            >
              <option value="btm">BTM</option>
              <option value="lda">LDA</option>
              <option value="random">Random</option>
            </Select>
          </HStack>
          <Textarea
            mb="5"
            placeholder="Here is a sample placeholder"
            onChange={handleInputChange}
            value={formval}
          />
          <Button colorScheme="teal" type="submit" onClick={handleSubmit}>
            Submit
          </Button>
        </FormControl>
        {<Chart output={output} />}

        <Footer />
      </Container>
    </>
  );
}
